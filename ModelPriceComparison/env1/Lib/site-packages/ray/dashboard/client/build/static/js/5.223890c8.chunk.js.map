{"version":3,"sources":["components/SearchComponent.tsx","components/Loading.tsx","service/job.ts","../node_modules/@material-ui/core/esm/TableContainer/TableContainer.js","../node_modules/@material-ui/core/esm/Switch/Switch.js","../node_modules/@material-ui/icons/HelpOutline.js","components/Tooltip.tsx","components/ProgressBar.tsx","pages/job/TaskProgressBar.tsx","pages/job/JobRow.tsx","pages/job/hook/useJobProgress.ts","pages/job/index.tsx","pages/job/hook/useJobList.ts"],"names":["useStyles","makeStyles","theme","search","margin","spacing","marginTop","SearchInput","label","onChange","defaultValue","classes","className","size","InputProps","value","target","endAdornment","position","SearchSelect","options","select","SelectProps","style","width","map","e","Loading","loading","open","zIndex","color","getJobList","get","getJobDetail","id","getJobProgress","jobId","jobIdQuery","TableContainer","React","props","ref","_props$component","component","Component","other","_objectWithoutProperties","_extends","clsx","root","withStyles","overflowX","name","Switch","_props$color","_props$edge","edge","_props$size","icon","thumb","edgeStart","edgeEnd","concat","capitalize","SwitchBase","type","checkedIcon","switchBase","input","checked","disabled","track","display","height","overflow","padding","boxSizing","flexShrink","verticalAlign","colorAdjust","marginLeft","marginRight","top","left","palette","grey","transition","transitions","create","duration","shortest","transform","opacity","colorPrimary","primary","main","backgroundColor","fade","action","hoverOpacity","common","black","white","colorSecondary","secondary","sizeSmall","boxShadow","shadows","borderRadius","_interopRequireDefault","require","Object","defineProperty","exports","default","_react","_default","createElement","d","createStyles","background","paper","border","text","StyledTooltip","Tooltip","tooltip","useHelpInfoStyles","helpIcon","HelpInfo","children","interactive","title","fontSize","flexDirection","legendRoot","marginBottom","legendItemContainer","flexWrap","alignItems","colorLegend","progressBarRoot","segment","ProgressBar","progress","total","unaccountedLabel","showLegend","showTooltip","segmentTotal","reduce","acc","finalTotal","filteredSegments","filter","Typography","key","segments","flex","useLegendStyles","LegendTooltip","placement","Paper","MiniTaskProgressBar","numFinished","numRunning","numPendingArgsAvail","numPendingNodeAssignment","numSubmittedToWorker","numUnknown","showAsComplete","useTheme","success","JobRow","job","job_id","submission_id","driver_info","status","start_time","end_time","ipLogMap","useContext","GlobalContext","useState","setProgress","msg","setMsg","error","setError","isRefreshing","setRefresh","refreshRef","useRef","tot","current","getProgress","useCallback","a","rsp","data","result","detail","setTimeout","useEffect","clearTimeout","onSwitchChange","event","useJobProgress","undefined","progressBar","TableRow","TableCell","align","node_ip_address","to","encodeURIComponent","dayjs","Number","format","pid","progressError","helpInfo","columns","href","JobList","jobList","setList","pageSize","pageNo","page","setPage","setFilter","getJob","sort","b","node","every","f","includes","val","changeFilter","find","push","originalJobs","useJobList","startsWith","TitleCard","inputProps","Math","min","Pagination","count","ceil","length","Table","TableHead","Box","justifyContent","TableBody","slice","index"],"mappings":"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","file":"static/js/5.223890c8.chunk.js","sourcesContent":["import {\n  InputAdornment,\n  makeStyles,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  search: {\n    margin: theme.spacing(1),\n    marginTop: 0,\n  },\n}));\n\nexport const SearchInput = ({\n  label,\n  onChange,\n  defaultValue,\n}: {\n  label: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n}) => {\n  const classes = useStyles();\n\n  return (\n    <TextField\n      className={classes.search}\n      size=\"small\"\n      label={label}\n      InputProps={{\n        onChange: ({ target: { value } }) => {\n          if (onChange) {\n            onChange(value);\n          }\n        },\n        defaultValue,\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <SearchOutlined />\n          </InputAdornment>\n        ),\n      }}\n    />\n  );\n};\n\nexport const SearchSelect = ({\n  label,\n  onChange,\n  options,\n}: {\n  label: string;\n  onChange?: (value: string) => void;\n  options: (string | [string, string])[];\n}) => {\n  const classes = useStyles();\n  return (\n    <TextField\n      className={classes.search}\n      size=\"small\"\n      label={label}\n      select\n      SelectProps={{\n        onChange: ({ target: { value } }) => {\n          if (onChange) {\n            onChange(value as string);\n          }\n        },\n        style: {\n          width: 100,\n        },\n      }}\n    >\n      <MenuItem value=\"\">All</MenuItem>\n      {options.map((e) =>\n        typeof e === \"string\" ? (\n          <MenuItem value={e}>{e}</MenuItem>\n        ) : (\n          <MenuItem value={e[0]}>{e[1]}</MenuItem>\n        ),\n      )}\n    </TextField>\n  );\n};\n","import { Backdrop, CircularProgress } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst Loading = ({ loading }: { loading: boolean }) => (\n  <Backdrop open={loading} style={{ zIndex: 100 }}>\n    <CircularProgress color=\"primary\" />\n  </Backdrop>\n);\n\nexport default Loading;\n","import { JobDetailRsp, JobListRsp, JobProgressRsp } from \"../type/job\";\nimport { get } from \"./requestHandlers\";\n\nexport const getJobList = () => {\n  return get<JobListRsp>(\"api/jobs/\");\n};\n\nexport const getJobDetail = (id: string) => {\n  return get<JobDetailRsp>(`jobs/${id}`);\n};\n\nexport const getJobProgress = (jobId?: string) => {\n  const jobIdQuery = jobId ? `?job_id=${jobId}` : \"\";\n  return get<JobProgressRsp>(`api/progress${jobIdQuery}`);\n};\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    width: '100%',\n    overflowX: 'auto'\n  }\n};\nvar TableContainer = /*#__PURE__*/React.forwardRef(function TableContainer(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableContainer.propTypes = {\n  /**\n   * The table itself, normally `<Table />`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableContainer'\n})(TableContainer);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n// @inheritedComponent IconButton\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nimport capitalize from '../utils/capitalize';\nimport SwitchBase from '../internal/SwitchBase';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-flex',\n      width: 34 + 12 * 2,\n      height: 14 + 12 * 2,\n      overflow: 'hidden',\n      padding: 12,\n      boxSizing: 'border-box',\n      position: 'relative',\n      flexShrink: 0,\n      zIndex: 0,\n      // Reset the stacking context.\n      verticalAlign: 'middle',\n      // For correct alignment with the text.\n      '@media print': {\n        colorAdjust: 'exact'\n      }\n    },\n\n    /* Styles applied to the root element if `edge=\"start\"`. */\n    edgeStart: {\n      marginLeft: -8\n    },\n\n    /* Styles applied to the root element if `edge=\"end\"`. */\n    edgeEnd: {\n      marginRight: -8\n    },\n\n    /* Styles applied to the internal `SwitchBase` component's `root` class. */\n    switchBase: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      zIndex: 1,\n      // Render above the focus ripple.\n      color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],\n      transition: theme.transitions.create(['left', 'transform'], {\n        duration: theme.transitions.duration.shortest\n      }),\n      '&$checked': {\n        transform: 'translateX(20px)'\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        opacity: 0.5\n      },\n      '&$disabled + $track': {\n        opacity: theme.palette.type === 'light' ? 0.12 : 0.1\n      }\n    },\n\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        backgroundColor: theme.palette.primary.main\n      },\n      '&$disabled + $track': {\n        backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white\n      }\n    },\n\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        backgroundColor: theme.palette.secondary.main\n      },\n      '&$disabled + $track': {\n        backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white\n      }\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      width: 40,\n      height: 24,\n      padding: 7,\n      '& $thumb': {\n        width: 16,\n        height: 16\n      },\n      '& $switchBase': {\n        padding: 4,\n        '&$checked': {\n          transform: 'translateX(16px)'\n        }\n      }\n    },\n\n    /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */\n    checked: {},\n\n    /* Pseudo-class applied to the internal SwitchBase component's disabled class. */\n    disabled: {},\n\n    /* Styles applied to the internal SwitchBase component's input element. */\n    input: {\n      left: '-100%',\n      width: '300%'\n    },\n\n    /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */\n    thumb: {\n      boxShadow: theme.shadows[1],\n      backgroundColor: 'currentColor',\n      width: 20,\n      height: 20,\n      borderRadius: '50%'\n    },\n\n    /* Styles applied to the track element. */\n    track: {\n      height: '100%',\n      width: '100%',\n      borderRadius: 14 / 2,\n      zIndex: -1,\n      transition: theme.transitions.create(['opacity', 'background-color'], {\n        duration: theme.transitions.duration.shortest\n      }),\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n      opacity: theme.palette.type === 'light' ? 0.38 : 0.3\n    }\n  };\n};\nvar Switch = /*#__PURE__*/React.forwardRef(function Switch(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$edge = props.edge,\n      edge = _props$edge === void 0 ? false : _props$edge,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"edge\", \"size\"]);\n\n  var icon = /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.thumb\n  });\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.root, className, {\n      'start': classes.edgeStart,\n      'end': classes.edgeEnd\n    }[edge], size === \"small\" && classes[\"size\".concat(capitalize(size))])\n  }, /*#__PURE__*/React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    icon: icon,\n    checkedIcon: icon,\n    classes: {\n      root: clsx(classes.switchBase, classes[\"color\".concat(capitalize(color))]),\n      input: classes.input,\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    ref: ref\n  }, other)), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.track\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary']),\n\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the switch.\n   * `small` is equivalent to the dense switch styling.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiSwitch'\n})(Switch);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z\"\n}), 'HelpOutline');\n\nexports.default = _default;","import {\n  createStyles,\n  makeStyles,\n  Tooltip,\n  TooltipProps,\n} from \"@material-ui/core\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\";\nimport React, { ReactNode } from \"react\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      border: \"1px solid #dadde9\",\n      color: theme.palette.text.primary,\n      padding: theme.spacing(1.5),\n    },\n  }),\n);\n\nexport const StyledTooltip = (props: TooltipProps) => {\n  const classes = useStyles();\n\n  return <Tooltip classes={{ tooltip: classes.root }} {...props} />;\n};\n\nconst useHelpInfoStyles = makeStyles((theme) =>\n  createStyles({\n    helpIcon: {\n      color: theme.palette.grey[500],\n    },\n  }),\n);\n\ntype HelpInfoProps = {\n  children: NonNullable<ReactNode>;\n  className?: string;\n};\n\nexport const HelpInfo = ({ children, className }: HelpInfoProps) => {\n  const classes = useHelpInfoStyles();\n\n  return (\n    <StyledTooltip className={className} interactive title={children}>\n      <HelpOutlineIcon fontSize=\"small\" className={classes.helpIcon} />\n    </StyledTooltip>\n  );\n};\n","import {\n  createStyles,\n  makeStyles,\n  Paper,\n  TooltipProps,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { StyledTooltip } from \"./Tooltip\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    legendRoot: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      marginBottom: theme.spacing(2),\n    },\n    legendItemContainer: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"nowrap\",\n      alignItems: \"center\",\n      \"&:not(:first-child)\": {\n        marginLeft: theme.spacing(1.5),\n      },\n      \"&:not(:last-child)\": {\n        marginRight: theme.spacing(1.5),\n      },\n    },\n    colorLegend: {\n      width: 16,\n      height: 16,\n      borderRadius: 4,\n      marginRight: theme.spacing(1),\n    },\n    progressBarRoot: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"nowrap\",\n      width: \"100%\",\n      height: 8,\n      backgroundColor: \"white\",\n      borderRadius: 6,\n      overflow: \"hidden\",\n    },\n    segment: {\n      \"&:not(:last-child)\": {\n        marginRight: 1,\n      },\n    },\n  }),\n);\n\nexport type ProgressBarSegment = {\n  /**\n   * Number of items in this segment\n   */\n  value: number;\n  /**\n   * Name of this segment\n   */\n  label: string;\n  /**\n   * A CSS color used to represent the segment.\n   */\n  color: string;\n};\n\nexport type ProgressBarProps = {\n  /**\n   * The different segments to the progress bar.\n   * The order determines the order of which we show the segments on the page.\n   * Ex: [Succeeded: 5, Running: 2, Pending: 10]\n   */\n  progress: ProgressBarSegment[];\n  /**\n   * The expected total number of items. If not provided, we calculate the total\n   * from the sum of the segments.\n   *\n   * If the sum of the values from each segment is less than total, then we create\n   * an additional segment for unaccounted items. This additional segment is placed\n   * at the end.\n   */\n  total?: number;\n  /**\n   * Label for unaccounted for items i.e. items that are not part of a `progress` segment.\n   */\n  unaccountedLabel?: string;\n  /**\n   * Whether a legend is shown. Default to true.\n   */\n  showLegend?: boolean;\n  /**\n   * Whether to show the a legend as a tooltip.\n   */\n  showTooltip?: boolean;\n};\n\nexport const ProgressBar = ({\n  progress,\n  total,\n  unaccountedLabel,\n  showLegend = true,\n  showTooltip = false,\n}: ProgressBarProps) => {\n  const classes = useStyles();\n  const segmentTotal = progress.reduce((acc, { value }) => acc + value, 0);\n  const finalTotal = total ?? segmentTotal;\n\n  // TODO(aguo): Handle total being > segmentTotal\n  const segments =\n    segmentTotal < finalTotal\n      ? [\n          ...progress,\n          {\n            value: finalTotal - segmentTotal,\n            label: unaccountedLabel ?? \"unaccounted\",\n            color: \"#EEEEEE\",\n          },\n        ]\n      : progress;\n\n  const filteredSegments = segments.filter(({ value }) => value);\n\n  return (\n    <div className={classes.root}>\n      {showLegend && (\n        <div className={classes.legendRoot}>\n          <div className={classes.legendItemContainer}>\n            <div\n              className={classes.colorLegend}\n              style={{ backgroundColor: \"black\" }}\n            />\n            <Typography>Total: {finalTotal}</Typography>\n          </div>\n          {filteredSegments.map(({ value, label, color }) => (\n            <div key={label} className={classes.legendItemContainer}>\n              <div\n                className={classes.colorLegend}\n                style={{ backgroundColor: color }}\n              />\n              <Typography>\n                {label}: {value}\n              </Typography>\n            </div>\n          ))}\n        </div>\n      )}\n      <LegendTooltip\n        showTooltip={showTooltip}\n        total={finalTotal}\n        segments={filteredSegments}\n      >\n        <div\n          className={classes.progressBarRoot}\n          style={{\n            backgroundColor: segmentTotal === 0 ? \"lightGrey\" : \"white\",\n          }}\n        >\n          {filteredSegments.map(({ color, label, value }) => (\n            <span\n              key={label}\n              className={classes.segment}\n              style={{\n                flex: value,\n                backgroundColor: color,\n              }}\n              data-testid=\"progress-bar-segment\"\n            />\n          ))}\n        </div>\n      </LegendTooltip>\n    </div>\n  );\n};\n\nconst useLegendStyles = makeStyles((theme) =>\n  createStyles({\n    legendItemContainer: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"nowrap\",\n      alignItems: \"center\",\n      \"&:not(:first-child)\": {\n        marginTop: theme.spacing(1),\n      },\n    },\n    colorLegend: {\n      width: 16,\n      height: 16,\n      borderRadius: 4,\n      marginRight: theme.spacing(1),\n    },\n  }),\n);\n\ntype LegendTooltipProps = {\n  showTooltip: boolean;\n  segments: ProgressBarSegment[];\n  total: number;\n  children: TooltipProps[\"children\"];\n};\n\nconst LegendTooltip = ({\n  showTooltip,\n  segments,\n  total,\n  children,\n}: LegendTooltipProps) => {\n  const classes = useLegendStyles();\n\n  if (showTooltip) {\n    return (\n      <StyledTooltip\n        placement=\"right\"\n        title={\n          <Paper>\n            <div className={classes.legendItemContainer}>\n              <div\n                className={classes.colorLegend}\n                style={{ backgroundColor: \"black\" }}\n              />\n              <Typography>Total: {total}</Typography>\n            </div>\n            {segments.map(({ value, label, color }) => (\n              <div key={label} className={classes.legendItemContainer}>\n                <div\n                  className={classes.colorLegend}\n                  style={{ backgroundColor: color }}\n                />\n                <Typography>\n                  {label}: {value}\n                </Typography>\n              </div>\n            ))}\n          </Paper>\n        }\n      >\n        {children}\n      </StyledTooltip>\n    );\n  }\n\n  return children;\n};\n","import { Theme } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { ProgressBar, ProgressBarSegment } from \"../../components/ProgressBar\";\nimport { TaskProgress } from \"../../type/job\";\n\nexport type TaskProgressBarProps = TaskProgress;\n\nexport const TaskProgressBar = ({\n  numFinished = 0,\n  numRunning = 0,\n  numPendingArgsAvail = 0,\n  numPendingNodeAssignment = 0,\n  numSubmittedToWorker = 0,\n  numUnknown = 0,\n}: TaskProgressBarProps) => {\n  const theme = useTheme<Theme>();\n  const progress: ProgressBarSegment[] = [\n    {\n      label: \"Finished\",\n      value: numFinished,\n      color: theme.palette.success.main,\n    },\n    {\n      label: \"Running\",\n      value: numRunning,\n      color: theme.palette.primary.main,\n    },\n    {\n      label: \"Waiting for scheduling\",\n      value: numPendingNodeAssignment + numSubmittedToWorker,\n      color: \"#cfcf08\",\n    },\n    {\n      label: \"Waiting for dependencies\",\n      value: numPendingArgsAvail,\n      color: \"#f79e02\",\n    },\n    {\n      label: \"Unknown\",\n      value: numUnknown,\n      color: \"#5f6469\",\n    },\n  ];\n  return <ProgressBar progress={progress} />;\n};\n\nexport type MiniTaskProgressBarProps = TaskProgress & {\n  /**\n   * Whether to color the entire progress bar as complete.\n   * For example, when the job is complete.\n   */\n  showAsComplete?: boolean;\n  /**\n   * Whether to show tooltip.\n   */\n  showTooltip?: boolean;\n};\n\nexport const MiniTaskProgressBar = ({\n  numFinished = 0,\n  numRunning = 0,\n  numPendingArgsAvail = 0,\n  numPendingNodeAssignment = 0,\n  numSubmittedToWorker = 0,\n  numUnknown = 0,\n  showAsComplete = false,\n  showTooltip = true,\n}: MiniTaskProgressBarProps) => {\n  const theme = useTheme<Theme>();\n  if (showAsComplete) {\n    const total =\n      numFinished +\n      numRunning +\n      numPendingArgsAvail +\n      numPendingNodeAssignment +\n      numSubmittedToWorker +\n      numUnknown;\n    return (\n      <ProgressBar\n        progress={[\n          {\n            label: \"Finished\",\n            value: total,\n            color: theme.palette.success.main,\n          },\n        ]}\n        showLegend={false}\n        showTooltip={showTooltip}\n      />\n    );\n  } else {\n    const progress: ProgressBarSegment[] = [\n      {\n        label: \"Finished\",\n        value: numFinished,\n        color: theme.palette.success.main,\n      },\n      {\n        label: \"Running\",\n        value: numRunning,\n        color: theme.palette.primary.main,\n      },\n      {\n        label: \"Waiting for scheduling\",\n        value: numPendingNodeAssignment + numSubmittedToWorker,\n        color: \"#cfcf08\",\n      },\n      {\n        label: \"Waiting for dependencies\",\n        value: numPendingArgsAvail,\n        color: \"#f79e02\",\n      },\n      {\n        label: \"Unknown\",\n        value: numUnknown,\n        color: \"#5f6469\",\n      },\n    ];\n    return (\n      <ProgressBar\n        progress={progress}\n        showLegend={false}\n        showTooltip={showTooltip}\n      />\n    );\n  }\n};\n","import { TableCell, TableRow } from \"@material-ui/core\";\nimport dayjs from \"dayjs\";\nimport React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { GlobalContext } from \"../../App\";\nimport { UnifiedJob } from \"../../type/job\";\nimport { useJobProgress } from \"./hook/useJobProgress\";\nimport { MiniTaskProgressBar } from \"./TaskProgressBar\";\n\ntype JobRowProps = {\n  job: UnifiedJob;\n};\n\nexport const JobRow = ({\n  job: {\n    job_id,\n    submission_id,\n    driver_info,\n    type,\n    status,\n    start_time,\n    end_time,\n  },\n}: JobRowProps) => {\n  const { ipLogMap } = useContext(GlobalContext);\n  const { progress, error } = useJobProgress(job_id ?? undefined);\n\n  const progressBar = (() => {\n    if (!progress || error) {\n      if (status === \"SUCCEEDED\" || status === \"FAILED\") {\n        // Show a fake all-green progress bar.\n        return <MiniTaskProgressBar numFinished={1} showTooltip={false} />;\n      } else {\n        return \"unavailable\";\n      }\n    }\n    if (status === \"SUCCEEDED\" || status === \"FAILED\") {\n      // TODO(aguo): Show failed tasks in progress bar once supported.\n      return <MiniTaskProgressBar {...progress} showAsComplete />;\n    } else {\n      return <MiniTaskProgressBar {...progress} />;\n    }\n  })();\n\n  return (\n    <TableRow>\n      <TableCell align=\"center\">{job_id ?? \"-\"}</TableCell>\n      <TableCell align=\"center\">{submission_id ?? \"-\"}</TableCell>\n      <TableCell align=\"center\">{status}</TableCell>\n      <TableCell align=\"center\">{progressBar}</TableCell>\n      <TableCell align=\"center\">\n        {/* TODO(aguo): Also show logs for the job id instead\n      of just the submission's logs */}\n        {driver_info && ipLogMap[driver_info.node_ip_address] ? (\n          <Link\n            to={`/log/${encodeURIComponent(\n              ipLogMap[driver_info.node_ip_address],\n            )}?fileName=${\n              type === \"DRIVER\" ? job_id : `driver-${submission_id}`\n            }`}\n            target=\"_blank\"\n          >\n            Log\n          </Link>\n        ) : (\n          \"-\"\n        )}\n      </TableCell>\n      <TableCell align=\"center\">\n        {dayjs(Number(start_time)).format(\"YYYY/MM/DD HH:mm:ss\")}\n      </TableCell>\n      <TableCell align=\"center\">\n        {end_time && end_time > 0\n          ? dayjs(Number(end_time)).format(\"YYYY/MM/DD HH:mm:ss\")\n          : \"-\"}\n      </TableCell>\n      <TableCell align=\"center\">{driver_info?.pid ?? \"-\"}</TableCell>\n    </TableRow>\n  );\n};\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { getJobProgress } from \"../../../service/job\";\nimport { TaskProgress } from \"../../../type/job\";\n\n/**\n * Hook for fetching a job's task progress.\n * Refetches every 4 seconds unless refresh switch is toggled off.\n *\n * If jobId is not provided, will fetch the task progress across all jobs.\n * @param jobId The id of the job whose task progress to fetch or undefined\n *              to fetch all progress for all jobs\n */\nexport const useJobProgress = (jobId?: string) => {\n  const [progress, setProgress] = useState<TaskProgress>();\n  const [msg, setMsg] = useState(\"Loading progress...\");\n  const [error, setError] = useState(false);\n  const [isRefreshing, setRefresh] = useState(true);\n  const refreshRef = useRef(isRefreshing);\n  const tot = useRef<NodeJS.Timeout>();\n  const onSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRefresh(event.target.checked);\n  };\n  refreshRef.current = isRefreshing;\n  const getProgress = useCallback(async () => {\n    if (!refreshRef.current) {\n      return;\n    }\n    const rsp = await getJobProgress(jobId);\n\n    if (rsp) {\n      if (rsp.data.result) {\n        setProgress(rsp.data.data.detail);\n      } else {\n        setError(true);\n      }\n      setMsg(rsp.data.msg);\n    }\n\n    tot.current = setTimeout(getProgress, 4000);\n  }, [jobId]);\n\n  useEffect(() => {\n    getProgress();\n    return () => {\n      if (tot.current) {\n        clearTimeout(tot.current);\n      }\n    };\n  }, [getProgress]);\n  return {\n    progress,\n    msg,\n    error,\n    isRefreshing,\n    onSwitchChange,\n  };\n};\n","import {\n  Box,\n  Switch,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport React from \"react\";\nimport Loading from \"../../components/Loading\";\nimport { SearchInput } from \"../../components/SearchComponent\";\nimport TitleCard from \"../../components/TitleCard\";\nimport { HelpInfo } from \"../../components/Tooltip\";\nimport { useJobList } from \"./hook/useJobList\";\nimport { JobRow } from \"./JobRow\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    width: \"100%\",\n  },\n  progressError: {\n    marginTop: theme.spacing(1),\n  },\n  helpInfo: {\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst columns = [\n  { label: \"Job ID\" },\n  { label: \"Submission ID\" },\n  { label: \"Status\" },\n  {\n    label: \"Tasks\",\n    helpInfo: (\n      <Typography>\n        The progress of the all submitted tasks per job. Tasks that are not yet\n        submitted will not show up in the progress bar.\n        <br />\n        <br />\n        Note: This column requires that prometheus is running. See{\" \"}\n        <a href=\"https://docs.ray.io/en/latest/ray-observability/ray-metrics.html#exporting-metrics\">\n          here\n        </a>{\" \"}\n        for instructions.\n      </Typography>\n    ),\n  },\n  {\n    label: \"Logs\",\n  },\n  { label: \"StartTime\" },\n  { label: \"EndTime\" },\n  { label: \"Driver Pid\" },\n];\n\nconst JobList = () => {\n  const classes = useStyles();\n  const {\n    msg,\n    isRefreshing,\n    onSwitchChange,\n    jobList,\n    changeFilter,\n    page,\n    setPage,\n  } = useJobList();\n\n  return (\n    <div className={classes.root}>\n      <Loading loading={msg.startsWith(\"Loading\")} />\n      <TitleCard title=\"JOBS\">\n        Auto Refresh:\n        <Switch\n          checked={isRefreshing}\n          onChange={(event) => {\n            onSwitchChange(event);\n          }}\n          name=\"refresh\"\n          inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n        />\n        <br />\n        Request Status: {msg}\n      </TitleCard>\n      <TitleCard title=\"Job List\">\n        <TableContainer>\n          <SearchInput\n            label=\"Job ID\"\n            onChange={(value) => changeFilter(\"job_id\", value)}\n          />\n          <SearchInput\n            label=\"Page Size\"\n            onChange={(value) =>\n              setPage(\"pageSize\", Math.min(Number(value), 500) || 10)\n            }\n          />\n          <div>\n            <Pagination\n              count={Math.ceil(jobList.length / page.pageSize)}\n              page={page.pageNo}\n              onChange={(e, pageNo) => setPage(\"pageNo\", pageNo)}\n            />\n          </div>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {columns.map(({ label, helpInfo }) => (\n                  <TableCell align=\"center\" key={label}>\n                    <Box\n                      display=\"flex\"\n                      justifyContent=\"center\"\n                      alignItems=\"center\"\n                    >\n                      {label}\n                      {helpInfo && (\n                        <HelpInfo className={classes.helpInfo}>\n                          {helpInfo}\n                        </HelpInfo>\n                      )}\n                    </Box>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {jobList\n                .slice(\n                  (page.pageNo - 1) * page.pageSize,\n                  page.pageNo * page.pageSize,\n                )\n                .map((job, index) => {\n                  const { job_id, submission_id } = job;\n                  return (\n                    <JobRow key={job_id ?? submission_id ?? index} job={job} />\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TitleCard>\n    </div>\n  );\n};\n\nexport default JobList;\n","import { useCallback, useContext, useEffect, useRef, useState } from \"react\";\nimport { GlobalContext } from \"../../../App\";\nimport { getJobList } from \"../../../service/job\";\nimport { UnifiedJob } from \"../../../type/job\";\n\nexport const useJobList = () => {\n  const [jobList, setList] = useState<UnifiedJob[]>([]);\n  const [page, setPage] = useState({ pageSize: 10, pageNo: 1 });\n  const [msg, setMsg] = useState(\"Loading the job list...\");\n  const [isRefreshing, setRefresh] = useState(true);\n  const { ipLogMap } = useContext(GlobalContext);\n  const [filter, setFilter] = useState<\n    {\n      key: \"job_id\" | \"status\";\n      val: string;\n    }[]\n  >([]);\n  const refreshRef = useRef(isRefreshing);\n  const tot = useRef<NodeJS.Timeout>();\n  const changeFilter = (key: \"job_id\" | \"status\", val: string) => {\n    const f = filter.find((e) => e.key === key);\n    if (f) {\n      f.val = val;\n    } else {\n      filter.push({ key, val });\n    }\n    setFilter([...filter]);\n  };\n  const onSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRefresh(event.target.checked);\n  };\n  refreshRef.current = isRefreshing;\n  const getJob = useCallback(async () => {\n    if (!refreshRef.current) {\n      return;\n    }\n    const rsp = await getJobList();\n\n    if (rsp) {\n      setList(\n        rsp.data.sort((a, b) => (b.start_time ?? 0) - (a.start_time ?? 0)),\n      );\n      setMsg(\"Fetched jobs\");\n    }\n\n    tot.current = setTimeout(getJob, 4000);\n  }, []);\n\n  useEffect(() => {\n    getJob();\n    return () => {\n      if (tot.current) {\n        clearTimeout(tot.current);\n      }\n    };\n  }, [getJob]);\n  return {\n    jobList: jobList.filter((node) =>\n      filter.every((f) => node[f.key] && (node[f.key] ?? \"\").includes(f.val)),\n    ),\n    msg,\n    isRefreshing,\n    onSwitchChange,\n    changeFilter,\n    page,\n    originalJobs: jobList,\n    setPage: (key: string, val: number) => setPage({ ...page, [key]: val }),\n    ipLogMap,\n  };\n};\n"],"sourceRoot":""}